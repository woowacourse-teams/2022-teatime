plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "org.sonarqube" version "3.4.0.2513"
    id 'java'
    id 'jacoco'
}

group = 'com.woowacourse'
version = '1.6.0-SNAPSHOT-' + new Date().format("yyyyMMddHHmmss")
sourceCompatibility = '11'

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'

    //dateTime format
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.1"

    //snake case to camel case (DB table)
    implementation group: 'com.google.guava', name: 'guava', version: '12.0'

    //rest docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //slack
    implementation 'com.slack.api:bolt:1.24.0'
    implementation 'com.slack.api:bolt-servlet:1.24.0'
    implementation 'com.slack.api:bolt-jetty:1.24.0'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //문자열 자르기
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // slack-log-alarm
    implementation "com.github.maricn:logback-slack-appender:1.6.1"

    // sonarqube
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // actuator for monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    baseDirFollowsSourceFile()
    dependsOn test
    inputs.dir snippetsDir
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task buildDocument(type: Copy) {
    dependsOn copyDocument
    from file("src/main/resources/static/docs")
    into file("build/resources/main/static/docs")
}

bootJar {
    dependsOn buildDocument
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

processResources.dependsOn('copySecret', 'copyDev1Secret', 'copyDev2Secret', 'copyProdSecret', 'copyTestSecret', 'copySlackWebHook')

task copySecret(type: Copy) {
    from '../config/application.yml'
    into 'src/main/resources'
}

task copyDev1Secret(type: Copy) {
    from '../config/application-dev1.yml'
    into 'src/main/resources'
}

task copyDev2Secret(type: Copy) {
    from '../config/application-dev2.yml'
    into 'src/main/resources'
}

task copyProdSecret(type: Copy) {
    from '../config/application-prod.yml'
    into 'src/main/resources'
}

task copyTestSecret(type: Copy) {
    from '../config/application-test.yml'
    into 'src/test/resources'
    rename {
        String fileName -> fileName.replace('application-test', 'application')
    }
}

task copySlackWebHook(type: Copy) {
    from '../config/application-slack-web-hook.yml'
    into 'src/main/resources'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "woowacourse-teams_2022-teatime_AYKcUDmP-LXZxO6IpXaj"
        property "sonar.projectName", "teatime-sonarqube"
        // 소스 경로
        property "sonar.sources", "src"
        // 언어
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        // SonarQube 에서 분석할 때 적용할 프로필(분석할 수준 설정)
        property "sonar.profile", "Sonar way"
        // 자바 클래스 파일위치
        property "sonar.java.binaries", "${buildDir}/classes"
        // 코드 분석에 사용할 테스트 소스
        property "sonar.test.inclusions", "**/*Test.java"
        // jacoco 플러그인의 결과 파일
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}
